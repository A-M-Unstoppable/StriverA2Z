Problem Link:- https://leetcode.com/problems/subarray-sum-equals-k/description/


class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int, int> prefixSum;  // Stores prefix sum frequencies
        int sum = 0;
        int count = 0;
        
        // Initialize prefixSum[0] as 1 to handle subarrays starting from index 0
        prefixSum[0] = 1;
        
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            
            // Check if there is a prefix sum such that (sum - k) = prefixSum
            if (prefixSum.find(sum - k) != prefixSum.end()) {
                count += prefixSum[sum - k];
            }
            
            // Increment the frequency of the current prefix sum
            prefixSum[sum]++;
        }
        
        return count;
    }
};
